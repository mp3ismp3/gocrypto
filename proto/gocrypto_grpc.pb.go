// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: gocrypto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exchange_OpenMatching_FullMethodName  = "/gocrypto.Exchange/OpenMatching"
	Exchange_CloseMatching_FullMethodName = "/gocrypto.Exchange/CloseMatching"
	Exchange_CreateOrder_FullMethodName   = "/gocrypto.Exchange/CreateOrder"
	Exchange_CancelOrder_FullMethodName   = "/gocrypto.Exchange/CancelOrder"
	Exchange_ModifyOrder_FullMethodName   = "/gocrypto.Exchange/ModifyOrder"
)

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeClient interface {
	OpenMatching(ctx context.Context, in *OpenMatchingRequest, opts ...grpc.CallOption) (*Response, error)
	CloseMatching(ctx context.Context, in *CloseMatchingRequest, opts ...grpc.CallOption) (*Response, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderLogResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*OrderLogResponse, error)
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*OrderLogResponse, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) OpenMatching(ctx context.Context, in *OpenMatchingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Exchange_OpenMatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CloseMatching(ctx context.Context, in *CloseMatchingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Exchange_CloseMatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderLogResponse, error) {
	out := new(OrderLogResponse)
	err := c.cc.Invoke(ctx, Exchange_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*OrderLogResponse, error) {
	out := new(OrderLogResponse)
	err := c.cc.Invoke(ctx, Exchange_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*OrderLogResponse, error) {
	out := new(OrderLogResponse)
	err := c.cc.Invoke(ctx, Exchange_ModifyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
// All implementations must embed UnimplementedExchangeServer
// for forward compatibility
type ExchangeServer interface {
	OpenMatching(context.Context, *OpenMatchingRequest) (*Response, error)
	CloseMatching(context.Context, *CloseMatchingRequest) (*Response, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*OrderLogResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*OrderLogResponse, error)
	ModifyOrder(context.Context, *ModifyOrderRequest) (*OrderLogResponse, error)
	mustEmbedUnimplementedExchangeServer()
}

// UnimplementedExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (UnimplementedExchangeServer) OpenMatching(context.Context, *OpenMatchingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMatching not implemented")
}
func (UnimplementedExchangeServer) CloseMatching(context.Context, *CloseMatchingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMatching not implemented")
}
func (UnimplementedExchangeServer) CreateOrder(context.Context, *CreateOrderRequest) (*OrderLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedExchangeServer) CancelOrder(context.Context, *CancelOrderRequest) (*OrderLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedExchangeServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*OrderLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedExchangeServer) mustEmbedUnimplementedExchangeServer() {}

// UnsafeExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServer will
// result in compilation errors.
type UnsafeExchangeServer interface {
	mustEmbedUnimplementedExchangeServer()
}

func RegisterExchangeServer(s grpc.ServiceRegistrar, srv ExchangeServer) {
	s.RegisterService(&Exchange_ServiceDesc, srv)
}

func _Exchange_OpenMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).OpenMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_OpenMatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).OpenMatching(ctx, req.(*OpenMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CloseMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CloseMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CloseMatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CloseMatching(ctx, req.(*CloseMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ModifyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exchange_ServiceDesc is the grpc.ServiceDesc for Exchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gocrypto.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenMatching",
			Handler:    _Exchange_OpenMatching_Handler,
		},
		{
			MethodName: "CloseMatching",
			Handler:    _Exchange_CloseMatching_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Exchange_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Exchange_CancelOrder_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _Exchange_ModifyOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gocrypto.proto",
}
